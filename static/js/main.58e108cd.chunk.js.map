{"version":3,"sources":["mine/actions/index.js","mine/App.js","mine/reducer/listReducer.js","mine/reducer/modeReducer.js","mine/reducer/index.js","index.js"],"names":["changeMode","goTo","name","type","main","App","dispatch","useDispatch","itemList","useSelector","state","mode","currentMode","inputRef","React","createRef","renderedMenuList","map","x","i","onClick","mainName","renderedItemList","content","obj","ind","id","isDone","text","view","className","ref","current","value","onKeyDown","event","key","items","localStorage","getItem","setItem","JSON","stringify","parse","listReducer","action","newState","produce","draftState","newState2","push","newState3","newState4","init","modeReducer","obj2","allReducer","combineReducers","myStore","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","store","document","getElementById"],"mappings":"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","file":"static/js/main.58e108cd.chunk.js","sourcesContent":["export const toggleListItem = (id,main) => {\r\n\treturn {\r\n\t\ttype: \"TOGGLE\",\r\n\t\tid: id,\r\n\t\tmain: main\r\n\t}\r\n\r\n}\r\n\r\nexport const addItem = (text,main) => {\r\n\treturn {\r\n\t\ttype: \"ADD\",\r\n\t\ttext: text,\r\n\t\tmain: main\r\n\t}\r\n}\r\n\r\nexport const clearItems = (main) => {\r\n\treturn {\r\n\t\ttype: \"CLEAR\",\r\n\t\tmain: main\r\n\t}\r\n}\r\n\r\nexport const saveItems = () => {\r\n\treturn {\r\n\t\ttype: \"SAVE\"\r\n\t}\r\n}\r\n\r\n//bruh menu\r\n\r\nexport const changeMode = (goTo,name) => {\r\n\treturn {\r\n\t\ttype: goTo,\r\n\t\tmain: name\r\n\t}\r\n}\r\n\r\nexport const addMain = (name) => {\r\n\treturn {\r\n\t\ttype: \"ADD_MAIN\",\r\n\t\tname: name\r\n\t}\r\n}","import React from 'react'\r\n\r\n//The Redux magic starts here. Access them anywhere directly without importting and stuff\r\nimport {useSelector, useDispatch} from 'react-redux'\r\nimport {toggleListItem, addItem, clearItems, saveItems, changeMode, addMain} from './actions'\r\n\r\n\r\n\r\nfunction App() {\r\n\tconst dispatch = useDispatch()\r\n\tconst itemList = useSelector(state => state.itemList)\r\n\tconst mode = useSelector(state => state.currentMode)\r\n\tlet inputRef = React.createRef()\r\n\r\n\r\n\t//Bruh.. very simple form handling. But don't overuse REF.\r\n\tfunction handleClick(event) {\r\n\t\tif (event.key == \"Enter\") {\r\n\t\t\tdispatch(addItem(inputRef.current.value,mode.main))\r\n\t\t\tinputRef.current.value = \"\"\r\n\t\t}\r\n\t}\r\n\r\n\tfunction handleMainClick() {\r\n\t\tdispatch(addMain(inputRef.current.value))\r\n\t\tinputRef.current.value = \"\"\r\n\t}\r\n\r\n\r\n\t//PRERENDER\r\n\tlet renderedMenuList = itemList.map((x,i) => <li onClick = {() => dispatch(changeMode(\"goToItem\",i))}> {x.mainName}</li>)\r\n\tlet renderedItemList = []\r\n\tif (mode.main !== null) {\r\n\t\trenderedItemList = itemList[mode.main].content.map( (obj,ind) => <li onClick = {() => dispatch(toggleListItem(ind,mode.main))}> {!obj.isDone ? obj.text : <s>{obj.text}</s>} </li>)\r\n\t} \r\n\r\n\t\r\n\tif (mode.view == \"HOME\") {\r\n\t\treturn (\r\n\t\t<div className = 'container'>\r\n\t\t\t<div className = 'row'>\r\n\t\t\t\t<div className = 'column'>\r\n\t\t\t\t\t<h1> // TODO </h1>\r\n\t\t\t\t\t<label><i className='far fa-folder-open'></i> home </label>\r\n\t\t\t\t\t<p>click on list to open it, or create a new list!</p>\r\n\t\t\t\t\t\r\n\t\t\t\t\t<ul>\r\n\t\t\t\t\t\t{renderedMenuList}\r\n\t\t\t\t\t</ul>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\r\n\t\t\t<div className = 'row'>\r\n\t\t\t<div className = 'column'>\r\n\t\t\t\t<input className=\"mainbox\" type='text' ref = {inputRef}/>\r\n\t\t\t</div>\r\n\t\t\t<div className = 'column'>\r\n\t\t\t\t<button className='button button-clear' onClick={handleMainClick}> create new list </button>\r\n\t\t\t\t<button className = 'button button-clear' onClick = {() => dispatch(saveItems())}> SAVE </button>\r\n\t\t\t</div>\r\n\t\t\t\t \r\n\t\t</div> \r\n\r\n\t\t</div>\r\n\t\t)\r\n\t}\r\n\r\n\r\n\r\n\t//this is bad\r\n\tif (mode.view == \"ITEM\") {\r\n\treturn(\r\n\t<div className = 'container'>\r\n\t\t<div className = 'row'>\r\n\t\t\t<div className = 'column'>\r\n\t\t\t\t\t<h1> // TODO </h1>\r\n\t\t\t\t\t<label><i className='far fa-folder-open'></i> home &middot; {itemList[mode.main].mainName} </label>\r\n\t\t\t\t\t<ul>\r\n\t\t\t\t\t\t{renderedItemList}\r\n\t\t\t\t\t\t\t \t\r\n\r\n\t\t\t\t\t</ul>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\r\n\t\t<div className = 'row'>\r\n\t\t\t<div className = 'column'>\r\n\t\t\t\t<input type='text' ref = {inputRef} onKeyDown = {handleClick}/>\r\n\t\t\t</div>\r\n\t\t\t<div className = 'column'>\r\n\t\t\t\t\r\n\t\t\t\t<button className = 'button button-clear' onClick = {() => dispatch(clearItems(mode.main))}> CLEAR </button>\r\n\t\t\t\t<button className = 'button button-clear' onClick = {() => dispatch(saveItems())}> SAVE </button>\r\n\t\t\t\t<button className = 'button' onClick = {() => dispatch(changeMode('goToHome',null))}> EXIT </button>\r\n\t\t\t</div>\r\n\t\t\t\t \r\n\t\t</div> \r\n\r\n\r\n\t</div>\r\n\t)}\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default App\t","//create ACTUAL FUNCTIONS, with FuncitonalNaming\r\n//goddamn with immuatabilty bull\r\n\r\nimport produce from 'immer'\r\n\r\n\r\nvar items = [\r\n\t{\r\n\t\tmainName: \"hello!\",\r\n\t\tcontent: [\r\n\t\t{text: \"Add a thing to do\", isDone: false},\r\n\t\t{text: \"Click on it when done\", isDone: true},\r\n\t\t{text: \"Use clear to start a new list\", isDone: false}]\r\n\t}\r\n]\r\n\r\n//damn, LocalStorage? Give me a break..INIT and LOADING\r\nif (localStorage.getItem('myData') == null) {\r\n\tlocalStorage.setItem('myData',JSON.stringify(items))\r\n} else {\r\n\titems = JSON.parse(localStorage.getItem('myData'))\r\n}\r\n\r\n\r\nconst listReducer = (state = items, action) => {\r\n\tswitch(action.type) {\r\n\t\tcase \"TOGGLE\":\r\n\t\t\tconst newState = produce(state, draftState => {\r\n\t\t\t    draftState[action.main].content[action.id].isDone = !draftState[action.main].content[action.id].isDone\r\n\t\t\t})\r\n\r\n\t\t\treturn newState;\r\n\r\n\t\tcase \"ADD\":\r\n\t\t\tif (action.text !== '') {\r\n\t\t\t\tconst newState2 = produce(state, draftState => {\r\n\t\t\t\t\tdraftState[action.main].content.push({text: action.text,isDone:false})\r\n\t\t\t\t\t\r\n\t\t\t\t})\r\n\t\t\t\treturn newState2\r\n\t\t\t} else {\r\n\t\t\t\treturn state;\r\n\t\t\t}\r\n\r\n\r\n\t\tcase \"CLEAR\":\r\n\t\t\tconst newState3 = produce(state, draftState => {\r\n\t\t\t\tdraftState[action.main].content = []\r\n\t\t\t})\r\n\r\n\t\t\treturn newState3;\r\n\r\n\t\tcase \"SAVE\":\r\n\t\t\tlocalStorage.setItem(\"myData\",JSON.stringify(state))\r\n\t\t\treturn state;\r\n\r\n\t\tcase \"ADD_MAIN\":\r\n\t\t\tconst newState4 = produce(state,draftState => {\r\n\t\t\t\tdraftState.push({\r\n\t\t\t\t\tmainName: action.name,\r\n\t\t\t\t\tcontent: [\r\n\t\t\t\t\t{text: \"Add a thing to do\", isDone: false}]\r\n\t\t\t\t})\r\n\t\t\t})\r\n\t\t\treturn newState4;\r\n\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}\r\n\r\n\r\nexport default listReducer","//Only Modes (Home, Item)\r\n\r\n\r\nvar init = {view: 'HOME',main: null}\r\n\r\nconst modeReducer = (state= init,action) => {\r\n\tswitch(action.type) {\r\n\t\tcase \"goToHome\":\r\n\t\t\tlet obj = {\r\n\t\t\t\tview: 'HOME',\r\n\t\t\t\tmain: null\r\n\t\t\t}\r\n\t\t\treturn obj;\r\n\r\n\t\tcase \"goToItem\":\r\n\t\t\tlet obj2 = {\r\n\t\t\t\tview: 'ITEM',\r\n\t\t\t\tmain: action.main\r\n\t\t\t}\r\n\t\t\treturn obj2;\r\n\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\nexport default modeReducer","import listReducer from './listReducer'\r\nimport modeReducer from './modeReducer'\r\nimport {combineReducers} from 'redux'\r\n\r\n\r\n//Define the STORE/STATE/DB structure here.\r\nconst allReducer = combineReducers({\r\n\titemList : listReducer,\r\n\tcurrentMode: modeReducer\r\n})\r\n\r\n\r\nexport default allReducer","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './mine/App.js'\nimport './index.css'\nimport './milligram.css' //okay\n\nimport {createStore} from 'redux'\nimport {Provider} from 'react-redux'\nimport allReducer from './mine/reducer'\n\nconst myStore = createStore(allReducer,window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__())\n\nReactDOM.render( <Provider store = {myStore}><App/></Provider>,document.getElementById('root'))"],"sourceRoot":""}